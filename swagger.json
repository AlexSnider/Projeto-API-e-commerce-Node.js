{
  "openapi": "3.0.0",
  "info": {
    "title": "API mini e-commerce",
    "description": "API para o projeto de mini e-commerce.",
    "contact": {
      "name": "Support",
      "email": "alexsnider8@gmail.com"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/v1/register": {
      "post": {
        "tags": ["User"],
        "description": "Register a new user.",
        "requestBody": {
          "description": "Necessary data to register a new user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseRegister"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "tags": ["User"],
        "description": "Login a user.",
        "requestBody": {
          "description": "Necessary data to login a user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseLogin"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ivalid Credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "Ivalid Credentials."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/logout": {
      "post": {
        "tags": ["User"],
        "description": "Logout a user.",
        "responses": {
          "200": {
            "description": "User logged out successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseLogout"
                }
              }
            }
          },
          "404": {
            "description": "No token was provided."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/reset-password": {
      "put": {
        "tags": ["User"],
        "description": "Send request to change user password.",
        "requestBody": {
          "description": "Necessary data to change user password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestChangePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send request to change user password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseChangePassword"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required."
          },
          "404": {
            "description": "Email or username not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/change-password/{token}": {
      "post": {
        "tags": ["User"],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "The token provided by the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Send request to reset user password.",
        "requestBody": {
          "description": "Necessary data to reset user password.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reseted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseResetPassword"
                }
              }
            }
          },
          "400": {
            "description": "New password is required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "New password is required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No token was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "No token was provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/reset-password-logged-user": {
      "post": {
        "tags": ["User"],
        "description": "Send request to reset user password.",
        "requestBody": {
          "description": "Necessary data to reset user password.",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RequestChangePasswordLoggedUser" }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Password reseted successfully.",
            "content": {
              "application/json": { "$ref": "#/components/schemas/ResponseResetPassword" }
            }
          },
          "400": {
            "description": "New password is required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "New password is required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No token was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "No token was provided."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/categories": {
      "post": {
        "tags": ["Categories"],
        "description": "Create a category.",
        "requestBody": {
          "description": "Necessary data to create a category.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCategory"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCategory"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/all-categories": {
      "get": {
        "tags": ["Categories"],
        "description": "Get all categories.",
        "responses": {
          "200": {
            "description": "Get all categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetAllCategories"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/categories/{id}": {
      "get": {
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get a category by it's id.",
        "responses": {
          "200": {
            "description": "Get a category by it's id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCategory"
                },
                "example": {
                  "id": 10,
                  "name": "Computadores"
                }
              }
            }
          },
          "404": {
            "description": "Category not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/update-category/{id}": {
      "put": {
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update a category.",
        "requestBody": {
          "description": "Necessary data to update a category.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUpdateCategory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUpdateCategory"
                }
              }
            }
          },
          "400": {
            "description": "Insuficient data or category already exists."
          },
          "404": {
            "description": "Category not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/delete-category/{id}": {
      "delete": {
        "tags": ["Categories"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete a category.",
        "responses": {
          "200": {
            "description": "Category deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDeleteCategory"
                }
              }
            }
          },
          "404": {
            "description": "Category not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/products": {
      "post": {
        "tags": ["Products"],
        "description": "Create a new product.",
        "requestBody": {
          "description": "Necessary data to create a new product.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreateProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCreateProduct"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/all-products": {
      "get": {
        "tags": ["Products"],
        "description": "Get all products.",
        "responses": {
          "200": {
            "description": "Get all products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetAllProducts"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/product/{id}": {
      "get": {
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the product.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get a product.",
        "responses": {
          "200": {
            "description": "Get a product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetOneProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/products/category/{categoryId}": {
      "get": {
        "tags": ["Products"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "description": "The id of the category.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get all products by category.",
        "responses": {
          "200": {
            "description": "Get all products by category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseProductsByCategory"
                }
              }
            }
          },
          "404": {
            "description": "Category not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "Category not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/update-product/{id}": {
      "put": {
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the product.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update a product.",
        "requestBody": {
          "description": "Necessary data to update a product.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUpdateProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUpdateProduct"
                }
              }
            }
          },
          "400": {
            "description": "At least one field must be provided."
          },
          "404": {
            "description": "Product not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/delete-product/{id}": {
      "delete": {
        "tags": ["Products"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the product.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Delete a product.",
        "responses": {
          "200": {
            "description": "Product deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDeleteProduct"
                }
              }
            }
          },
          "404": {
            "description": "Product not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/orders": {
      "post": {
        "tags": ["Orders"],
        "description": "Create a new order.",
        "requestBody": {
          "description": "Necessary data to create a new order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreateOrder"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseCreateOrder"
                }
              }
            }
          },
          "400": {
            "description": "All fields are required.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "All fields are required."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "User not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "Internal server error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/all-orders": {
      "get": {
        "tags": ["Orders"],
        "description": "Get all orders.",
        "responses": {
          "200": {
            "description": "Get all orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetAllOrders"
                }
              }
            }
          },
          "404": {
            "description": "Orders not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the order.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get a order.",
        "responses": {
          "200": {
            "description": "Get a order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetOrderById"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/orders/orders-items/{id}": {
      "get": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the order.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get all order items.",
        "responses": {
          "200": {
            "description": "Get all order items.",

            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGetOrdersItemsByOrderId"
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/v1/update-orders/{id}": {
      "put": {
        "tags": ["Orders"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the order.",

            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Update a order.",
        "requestBody": {
          "description": "Necessary data to update a order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestUpdateOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUpdateOrder"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Message error.",
                      "example": "Invalid request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RequestRegister": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name.",
            "example": "alex oliveira"
          },
          "email": {
            "type": "string",
            "description": "User E-mail.",
            "example": "alex@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User password.",
            "example": "aleX321%#!"
          }
        }
      },
      "ResponseRegister": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name.",
            "example": "alex oliveira"
          },
          "email": {
            "type": "string",
            "description": "User E-mail.",
            "example": "alex@gmail.com"
          },
          "password": {
            "type": "string",
            "description": "User password.",
            "example": "aleX321%#!"
          },
          "id": {
            "type": "string",
            "description": "User ID.",
            "format": "uuid"
          }
        }
      },
      "RequestLogin": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name.",
            "example": "alex oliveira"
          },
          "password": {
            "type": "string",
            "description": "User password.",
            "example": "aleX321%#!"
          }
        }
      },
      "ResponseLogin": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name.",
            "example": "alex oliveira"
          },
          "password": {
            "type": "string",
            "description": "User password.",
            "example": "aleX321%#!"
          }
        }
      },
      "ResponseLogout": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Logout message.",
            "example": "User logged out successfully and token deleted."
          }
        }
      },
      "RequestChangePassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User E-mail.",
            "example": "anytsh8@gmail.com"
          },
          "username": {
            "type": "string",
            "description": "User name.",
            "example": "alex oliveira"
          }
        }
      },
      "ResponseChangePassword": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Change password message.",
            "example": "Password reset link has been sent to the E-mail registered."
          }
        }
      },
      "RequestResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User new password.",
            "example": "aleX321%#!"
          },
          "confirmPassword": {
            "type": "string",
            "description": "User new password.",
            "example": "aleX321%#!"
          }
        }
      },
      "ResponseResetPassword": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Reset password message.",
            "example": "Password changed successfully."
          }
        }
      },
      "RequestChangePasswordLoggedUser": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "User old password.",
            "example": "aleX321%#!"
          },
          "password": {
            "type": "string",
            "description": "User new password.",
            "example": "aleX321%#!"
          },
          "confirmPassword": {
            "type": "string",
            "description": "User confirm new password.",
            "example": "aleX321%#!"
          }
        }
      },
      "ResponseChangePasswordLoggedUser": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Change password message.",
            "example": "Password changed successfully! Please log in again with your new password."
          }
        }
      },
      "RequestCategory": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "description": "Category name.",
            "example": "Computadores"
          }
        }
      },
      "ResponseCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name.",
            "example": "Computadores"
          }
        }
      },
      "ResponseGetAllCategories": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseCategory"
            }
          }
        }
      },
      "ResponseGetOneCategory": {
        "type": "object",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ResponseCategory"
          }
        }
      },
      "RequestUpdateCategory": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "description": "Category name.",
            "example": "Computadores"
          }
        }
      },
      "ResponseUpdateCategory": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Update category message.",
            "example": "Category updated successfully."
          }
        }
      },
      "ResponseDeleteCategory": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Delete category message.",
            "example": "Category deleted successfully."
          }
        }
      },
      "RequestCreateProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name.",
            "example": "Notebook"
          },
          "description": {
            "type": "string",
            "description": "Product description.",
            "example": "Notebook gamer"
          },
          "unit_price": {
            "type": "number",
            "description": "Product unit price.",
            "example": 2000
          },
          "stock": {
            "type": "number",
            "description": "Product stock.",
            "example": 10
          },
          "categoryId": {
            "type": "number",
            "description": "Product category id.",
            "example": 11
          }
        }
      },
      "ResponseCreateProduct": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Create product message.",
            "example": "Product created successfully."
          }
        }
      },
      "ResponseGetAllProducts": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGetAllProducts"
            },
            "example": [
              {
                "id": 1,
                "name": "Notebook",
                "description": "Notebook gamer",
                "unit_price": 2000,
                "stock": 10,
                "category_id": 11
              }
            ]
          }
        }
      },
      "ResponseGetOneProduct": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ResponseGetOneProduct"
          }
        },
        "example": {
          "id": 1,
          "name": "Notebook",
          "description": "Notebook gamer",
          "unit_price": 2000,
          "stock": 10,
          "categoryId": 11
        }
      },
      "ResponseProductsByCategory": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseProductsByCategory"
            },
            "example": [
              {
                "id": 1,
                "name": "Notebook",
                "description": "Notebook gamer",
                "unit_price": 2000,
                "stock": 10,
                "category_id": 11
              }
            ]
          }
        }
      },
      "RequestUpdateProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name.",
            "example": "Notebook"
          },
          "description": {
            "type": "string",
            "description": "Product description.",
            "example": "Notebook gamer"
          },
          "unit_price": {
            "type": "number",
            "description": "Product unit price.",
            "example": 2000
          },
          "stock": {
            "type": "number",
            "description": "Product stock.",
            "example": 10
          },
          "categoryId": {
            "type": "number",
            "description": "Product category id.",
            "example": 11
          }
        }
      },
      "ResponseUpdateProduct": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Update product message.",
            "example": "Product updated successfully."
          }
        }
      },
      "ResponseDeleteProduct": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Delete product message.",
            "example": "Product deleted successfully."
          }
        }
      },
      "RequestCreateOrder": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "description": " The UUID of the user.",
            "example": "7605ef5d-b887-4210-a186-6fd89db12b7a"
          },
          "status": {
            "type": "string",
            "description": "Order status.",
            "example": "pending"
          },
          "payment_method": {
            "type": "string",
            "description": "Order payment method.",
            "example": "Credit Card"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "orderId": {
                  "type": "number",
                  "description": "Order id.",
                  "example": 17
                },
                "productId": {
                  "type": "number",
                  "description": "Product id.",
                  "example": 5
                },
                "productName": {
                  "type": "string",
                  "description": "Product name.",
                  "example": "Amarula"
                },
                "quantity": {
                  "type": "number",
                  "description": "Product quantity.",
                  "example": 3
                }
              }
            }
          }
        }
      },
      "ResponseCreateOrder": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Create order message.",
            "example": "Order created successfully."
          },
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "Order id.",
                "example": 17
              },
              "userId": {
                "type": "string",
                "format": "uuid",
                "description": " The UUID of the user.",
                "example": "7605ef5d-b887-4210-a186-6fd89db12b7a"
              },
              "status": {
                "type": "string",
                "description": "Order status.",
                "example": "pending"
              },
              "payment_method": {
                "type": "string",
                "description": "Order payment method.",
                "example": "Credit Card"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "orderId": {
                  "type": "number",
                  "description": "Order id.",
                  "example": 33
                },
                "productId": {
                  "type": "number",
                  "description": "Product id.",
                  "example": 5
                },
                "productName": {
                  "type": "string",
                  "description": "Product name.",
                  "example": "Amarula"
                },
                "quantity": {
                  "type": "number",
                  "description": "Product quantity.",
                  "example": 3
                }
              }
            }
          }
        }
      },
      "ResponseGetAllOrders": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGetAllOrders"
            },
            "example": [
              {
                "id": 17,
                "userId": "7605ef5d-b887-4210-a186-6fd89db12b7a",
                "status": "pending",
                "payment_method": "Credit Card",
                "order_total_price": 3000
              }
            ]
          }
        }
      },
      "ResponseGetOrderById": {
        "type": "object",
        "properties": {
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "Order id.",
                "example": 17
              },
              "userId": {
                "type": "string",
                "format": "uuid",
                "description": " The UUID of the user.",
                "example": "7605ef5d-b887-4210-a186-6fd89db12b7a"
              },
              "status": {
                "type": "string",
                "description": "Order status.",
                "example": "pending"
              },
              "payment_method": {
                "type": "string",
                "description": "Order payment method.",
                "example": "Credit Card"
              },
              "order_total_price": {
                "type": "number",
                "description": "Order total price.",
                "example": 3000
              }
            }
          }
        }
      },
      "ResponseGetOrdersItemsByOrderId": {
        "type": "object",
        "properties": {
          "order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "description": "Order id.",
                "example": 17
              },
              "userId": {
                "type": "string",
                "format": "uuid",
                "description": " The UUID of the user.",
                "example": "7605ef5d-b887-4210-a186-6fd89db12b7a"
              },
              "status": {
                "type": "string",
                "description": "Order status.",
                "example": "pending"
              },
              "payment_method": {
                "type": "string",
                "description": "Order payment method.",
                "example": "Credit Card"
              },
              "order_total_price": {
                "type": "number",
                "description": "Order total price.",
                "example": 3000
              }
            }
          },
          "ordersItems": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "description": "Order id.",
                  "example": 17
                },
                "orderId": {
                  "type": "number",
                  "description": "Order id.",
                  "example": 17
                },
                "productId": {
                  "type": "number",
                  "description": "Product id.",
                  "example": 5
                },
                "productName": {
                  "type": "string",
                  "description": "Product name.",
                  "example": "Amarula"
                },
                "quantity": {
                  "type": "number",
                  "description": "Product quantity.",
                  "example": 3
                }
              }
            }
          }
        }
      },
      "RequestUpdateOrder": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Order status.",
            "example": "canceled"
          }
        }
      },
      "ResponseUpdateOrder": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Update order message.",
            "example": "Order updated successfully"
          }
        }
      }
    }
  }
}
